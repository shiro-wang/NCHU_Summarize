import java.util.ArrayList;
import java.util.Collections;
import java.util.Stack;

public class HW09_4108056004_1 extends LSD{
    public HW09_4108056004_1(){
    }
    public static void main(String args[]){
        int [][] array = {{0,1},{0,2},{0,4},{1,3},{1,4},{2,5},{6,7}};
        
        HW09_4108056004_1 test = new HW09_4108056004_1();
        int ans = test.Distance(array);
        System.out.println(ans);
    }
    
    static int[] marked = new int [10000];
    static int[][] sametree = new int [1000][1000];
    static int[] distto = new int [10000];
    static int[] edgeto = new int [10000];
    static int[] treeamout = new int[10000];

    public int Distance(int[][] array){
        Gragh graph=new Gragh(array);
        int hashlong = graph.hashset.bucket.length;
        for(int i=0;i<hashlong;i++)
        {
            if(graph.hashset.bucket[i]!=null)
            {
                Element temp=graph.hashset.bucket[i];
                while(temp!=null)
                {
                    System.out.print(temp.key+":");
                    for(int j=0;j<temp.val.size();j++)
                    {
                        System.out.print(temp.val.get(j)+" ");
                    }
                    System.out.print(",i:"+i);
                    System.out.println();
                    temp=temp.next;
                }
            }
        }
        cleararray(marked);
        cleararray(edgeto);
        cleararray(distto);
        int islandnum = 0;
        for(int i=0;i<hashlong;i++)
        {
            if(graph.hashset.bucket[i]!=null)
            {
                Element temp=graph.hashset.bucket[i];
                if(marked[temp.key]==0)
                {
                    ChinaQueue queue = new ChinaQueue(10);
                    bfs(temp.key,graph,islandnum,queue);
                    islandnum++;
                }
                
            }
        }
        int maxislandnum=0;
        int maxamout = 0;
        for(int i=0;i<islandnum;i++){
            if(treeamout[i]>maxamout){
                maxislandnum = i;
                maxamout = treeamout[i];
            }
        }
        
        cleararray(marked);
        int c=0;
        int min_max=0;
        System.out.println(sametree[maxislandnum][c]+" "+treeamout[maxislandnum]);
        for(int i=0;c<treeamout[maxislandnum];c++)
        { 
            ChinaQueue queue = new ChinaQueue(10);
            i = sametree[maxislandnum][c];
            int mm = findmin_max(i,graph,queue);
            if(mm > min_max)
            {
                min_max = mm;
            }
            cleararray(marked);
            cleararray(edgeto);
            cleararray(distto);
        }

        return min_max;
    }
    
    class Gragh
    {
        public Hash hashset;

        public Gragh(int[][] Edge)
        {
            hashset=new Hash(Edge.length);
            for(int[] v : Edge)
                hashset.put(v[0],v[1]);
        }
        public ArrayList<Integer> getAdj(int v)
        {
            return hashset.get(v);
        }
        public int EdgeOf(int v)
        {
            return hashset.get(v).size();
        }
    }
    class Element
    {
        public int key;
        public ArrayList<Integer> val;
        Element next;
        public Element(int key,ArrayList<Integer> val)
        {
            this.key=key;
            this.val=val;
            next=null;
        }
    }
    class Hash
    {
        public int capacity;
        Element[] bucket;

        public Hash(int cap)
        {
            this.capacity=(1<<(int)(Math.log(cap<<1)/Math.log(2)+1))-1;
            this.bucket=new Element[1+capacity];
        }
        public int hashcode(int num)
        {
            return num&capacity;
        }

        public void put(int v,int u)
        {
            append(v, u);
            append(u, v);
        }
        public void append(int v,int u)
        {
            int hash=hashcode(v);
            for(Element e=bucket[hash];e!=null;e=e.next)
                if(v==e.key)
                {
                    e.val.add(u);
                    return;
                }

            Element newE=new Element(v,new ArrayList<Integer>());
            newE.val.add(u);
            newE.next=bucket[hash];
            bucket[hash]=newE;
        }

        public ArrayList<Integer> get(int v)
        {
            for(Element e=bucket[hashcode(v)];e!=null;e=e.next)
                if(v==e.key)    return  e.val;
            return null;
        }
    }
    class ChinaQueue
    {
        int head;
        int tail;
        int[] array;
        int MAX_QUEUE_SIZE;
        public ChinaQueue(int len)
        {
            array=new int[len];
            MAX_QUEUE_SIZE = len;
            head=tail=0;
        }
        public boolean isEmpty()
        {
            return tail==head;
        }
        public int dequeue()
        {
            if (head == tail){
                System.out.println("Empty");
                return 0; 
            }
            head = (head + 1) % MAX_QUEUE_SIZE;
            return array[head];
        }
        public void enqueue(int v)
        {
            tail = (tail + 1) % MAX_QUEUE_SIZE;
            if (head == tail){
                IwantMore___();
            }
            array[tail] = v;
        }
        public void IwantMore___()
        {
            int[] newarray = new int[array.length*2];
            for(int i=head;i<array.length;i++){
                newarray[i+array.length]=array[i];
            }
            for(int i=0;i<tail;i++){
                newarray[i]=array[i];
            }
            array = newarray;
        }

        
        
    }
    public void bfs(int v, Gragh gragh, int islandnum, ChinaQueue q)
    {
        q.enqueue(v);
        marked[v] = 1;
        int amount = 0;
        sametree[islandnum][amount++] = v;
        while(!q.isEmpty()){
            int s = q.dequeue();
            Element temp = gragh.hashset.bucket[s];
            for(int i=0;i<temp.val.size();i++)
            {
                int qv = temp.val.get(i);
                if(marked[qv] == 0)
                {
                    q.enqueue(qv);
                    marked[qv] = 1;
                    sametree[islandnum][amount++] = qv;
                }
            }
        }
        treeamout[islandnum]=amount;
    }
    public int findmin_max(int v, Gragh gragh, ChinaQueue q)
    {
        q.enqueue(v);
        System.out.println("以"+v+"為主");
        int max=0;
        marked[v] = 1;
        distto[v] = 0;
        while(!q.isEmpty()){
            int s = q.dequeue();
            System.out.println(s+":"+distto[s]);
            Element temp = gragh.hashset.bucket[s];
            for(int i=0;i<temp.val.size();i++)
            {
                int qv = temp.val.get(i);
                if(marked[qv] == 0)
                {
                    q.enqueue(qv);
                    marked[qv] = 1;
                    edgeto[qv] = s;
                    distto[qv] = distto[s] + 1;
                    if(distto[qv]>max){
                        max=distto[qv];
                    }
                }
            }
        }
        
        return max;
    }
    public void cleararray(int[] a){
        for(int i=0;i<a.length;i++){
            a[i]=0;
        }
    }
    
}
